{#
/**
* @file
* Default theme implementation to display a 'tabs' paragraph.
*
* Available variables:
* - paragraph: Full paragraph entity.
*   Only method names starting with "get", "has", or "is" and a few common
*   methods such as "id", "label", and "bundle" are available. For example:
*   - paragraph.getCreatedTime() will return the paragraph creation timestamp.
*   - paragraph.id(): The paragraph ID.
*   - paragraph.bundle(): The type of the paragraph, for example, "image" or "text".
*   - paragraph.getOwnerId(): The user ID of the paragraph author.
*   See Drupal\paragraphs\Entity\Paragraph for a full list of public properties
*   and methods for the paragraph object.
* - content: All paragraph items. Use {{ content }} to print them all,
*   or print a subset such as {{ content.field_example }}. Use
*   {{ content|without('field_example') }} to temporarily suppress the printing
*   of a given child element.
* - attributes: HTML attributes for the containing element.
*   The attributes.class element may contain one or more of the following
*   classes:
*   - paragraphs: The current template type (also known as a "theming hook").
*   - paragraphs--type-[type]: The current paragraphs type. For example, if the paragraph is an
*     "Image" it would result in "paragraphs--type--image". Note that the machine
*     name will often be in a short form of the human readable label.
*   - paragraphs--view-mode--[view_mode]: The View Mode of the paragraph; for example, a
*     preview would result in: "paragraphs--view-mode--preview", and
*     default: "paragraphs--view-mode--default".
* - view_mode: View mode; for example, "preview" or "full".
* - logged_in: Flag for authenticated user status. Will be true when the
*   current user is a logged-in member.
* - is_admin: Flag for admin user status. Will be true when the current user
*   is an administrator.
*
* @see template_preprocess_paragraph()
*
* @ingroup themeable
#}

{# Attach the necessary library. #}
{{ attach_library('paragraphs_bundles/paragraphs-bundles') }}
{{ attach_library('paragraph_bundle_tabs/paragraph-bundle-tabs') }}

{# Set the paragraph id. #}
{% set paragraph_id = 'pb__tabs-' ~ paragraph.id.value %}
{# Set the inner classes for the paragraph. #}
{% set classes_inner = 'paragraph__inner pb-tabs__inner' %}

{# Set the classes for the paragraph. #}
{% set classes = [
  'paragraph',
  'paragraph--type--' ~ paragraph.bundle|clean_class,
  view_mode ? 'paragraph--view-mode--' ~ view_mode|clean_class,
  not paragraph.isPublished() ? 'paragraph--unpublished',
  'paragraph--id--' ~ paragraph.id.value,
  paragraph_id,
] %}

{# Set the color styles for the paragraph. #}
{% set pb_styles = {
  'pb-bg': 'pb_display_bg',
  'pb-bg-h': 'pb_display_bg_hover',
  'pb-br': 'pb_display_border_color',
  'pb-br-h': 'pb_display_border_hover',
  'pb-tx': 'pb_display_text',
  'pb-tx-h': 'pb_display_text_hover',
  'pb-bt-a': 'pb_display_tab_active_item'
} %}

{# Set the display properties for the paragraph. #}
{% set pb_displays = [
  'pb_display_width',
  'pb_display_border',
  'pb_display_border_radius',
  'pb_display_margin',
  'pb_display_padding',
  'pb_display_shadow',
] %}

{# Add display properties to the inner classes if they exist. #}
{% for pb_display in pb_displays %}
  {% set display_value = content[pb_display]|render|striptags|trim %}
  {% set classes_inner = display_value ? classes_inner ~ ' ' ~ display_value : classes_inner %}
{% endfor %}

{# Set the background opacity for the paragraph. #}
{% set pb_bg_opacity = content.pb_display_bg_opacity|render|striptags|trim %}
{% if pb_bg_opacity != 100 %}
  {% set pb_bg_opacity = '0.' ~ "%02d"|format(pb_bg_opacity) %}
{% endif %}

{# Set the style attributes for the paragraph. #}
{% set pb_style_attributes = [] %}
{% for key, value in pb_styles %}
  {% set style = content[value]|render|striptags|trim %}
  {% if style %}

    {% if value == 'pb_display_bg' %}
      {% set pb_style_attributes = pb_style_attributes|merge(['--' ~ key ~ ':rgba(' ~ style ~ ', ' ~ pb_bg_opacity ~ ');']) %}
    {% elseif style starts with '#' %}
      {% set pb_style_attributes = pb_style_attributes|merge(['--' ~ key ~ ':' ~ style ~ ';']) %}
    {% else %}
    {# In case widget was changed. #}
      {% set pb_style_attributes = pb_style_attributes|merge(['--' ~ key ~ ':rgb(' ~ style ~ ');']) %}
    {% endif %}

  {% endif %}
{% endfor %}

{# Animated Tab Display #}
{% set pb_animated_tab = content.pb_display_tab_animated_tabs|render|striptags|trim %}
{% set pb_vertical_tabs = content.pb_display_tab_vertical_tabs|render|striptags|trim %}
{% set pb_breakpoints = content.pb_display_tabs_breakpoints|render|striptags|trim|default('pb__992') %}
{% set activate_vertical = pb_vertical_tabs == 'On' ? 'v__tabs ' ~ pb_breakpoints : '' %}
{% set pb_title  = content.pb_content_title|render|striptags|trim %}

{# Render the paragraph. #}
<div {{ attributes.addClass(classes).setAttribute('id', paragraph_id) }}>
  <div class="{{ classes_inner }}" {% if pb_style_attributes|length > 0 %}style="{{ pb_style_attributes|join(' ') }}"{% endif %}>

    <div class="pb__content-full">
      {# Render the content title if it exists. #}
      {% if pb_title %}
      <h3 class="pb__content-title">{{ content.pb_content_title }}</h3>
      {% endif %}

      {# Set the tab id. #}
      {% set tab_id = 'pb__tab-' ~ paragraph.id.value %}
      <div id="{{ tab_id }}" class="pb__row pb__tabs-bundle {{ activate_vertical }}">

        {# Render the tab buttons. #}
        <div class="pb__bar pb__tabs-button{{ pb_display_active == '' ? '' : ' ' ~ pb_display_active }}" role="tablist" aria-label="{{ 'Tab List'|t }}">
          <span class="visually-hidden">{{ 'Use the arrow keys to navigate between tabs'|t }}</span>
          {% for key, item in content.pb_content_tab_section %}
            {% if key|first != '#' %}

              {% set tab_index = key + 1 %}
              {% set raw_slug = item['#paragraph'].pb_content_tab_name.value|lower|replace({' ': '-', '?': '', ',': '', '.': '', '/': '-'}) %}
              {% set base_slug = raw_slug|length > 50 ? raw_slug[:50]|clean_id : raw_slug|clean_id %}
              {% set tab_slug = paragraph.id.value ~ '-' ~ tab_index ~ '-' ~ base_slug %}

              <button id="{{ tab_id }}-{{ tab_index }}"
                class="pb__button pb__tab-button"
                data-fragment="{{ tab_slug }}"
                aria-label="{{ item['#paragraph'].pb_content_tab_name.value|decode_entities }}"
                aria-selected="{% if key == 0 %}true{% else %}false{% endif %}"
                aria-controls="{{ tab_id }}-{{ tab_index }}-pane"
                aria-expanded="{% if key == 0 %}true{% else %}false{% endif %}"
                type="button" role="tab" {% if key != 0 %}tabindex="-1"{% endif %}>
                <span>{{ item['#paragraph'].pb_content_tab_name.value|decode_entities }}</span>
              </button>
            {% endif %}
          {% endfor %}
        </div>

        {# Render the tab content. #}
        <div class="pb__row pb__tabs-pane">
          {% for key, item in content.pb_content_tab_section %}
            {% if key|first != '#' %}
              <div id="{{ tab_id }}-{{ key + 1 }}-pane" role="tabpanel" data-index="{{ key }}" aria-hidden="{% if key == 0 %}false{% else %}true{% endif %}" aria-labelledby="{{ tab_id }}-{{ key + 1 }}" class="pb__tab-pane {{ pb_animated_tab == '' ? '' : ' ' ~ pb_animated_tab }}" {% if key == 0 %} aria-live="polite"{% endif %}>
                {% for body_key, body_item in item['#paragraph'].pb_content_tab_body %}
                  {% set section_body = item %}
                  {% set lang = section_body['#paragraph'].langcode[0].value %}

                  {# Check if a translation exists and load the appropriate entity. #}
                  {% if section_body['#paragraph'].pb_content_tab_body[body_key].entity.hasTranslation(lang) %}
                    {% set section_translation = section_body['#paragraph'].pb_content_tab_body[body_key].entity.getTranslation(lang) %}
                  {% else %}
                    {% set section_translation = section_body['#paragraph'].pb_content_tab_body[body_key].entity %}
                  {% endif %}

                  {% set section_body = section_body|merge({'#paragraph': section_translation}) %}
                  {% set section_body = section_body|merge({'#cache': {}}) %}

                  {# Print the compiled section body. #}
                  {{ section_body }}
                {% endfor %}
              </div>
            {% endif %}
          {% endfor %}
        </div>

      </div> {# End of pb__tabs-bundle  #}

    </div>
  </div>
</div> {# End of main wrapper #}
